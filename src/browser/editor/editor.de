type Editor(root, cursor, textArea)
impl new(self, root) for Editor {
    self.root = root
    self.cursor = Cursor()
    self.textArea = TextArea(root)

    self.textArea.updateContent(list(""))
    self.cursor.render(self.textArea.references)
}

PAIRED_SYMBOLS = list("{}", "()", "\"\"")
impl handleKeys(self, event) for Editor {
    @cursor = self.cursor
    @textArea = self.textArea
    @content = self.textArea.content
    @references = self.textArea.references
    @key = event.key

    match key {
        case "ArrowUp" {
            # moves the cursor up
            if not cursor.rowStatus(content).have(STATUS_LESS) {
                cursor.detach()
                cursor.shift(-1, null)
                if cursor.col > content.get(cursor.row).size() {
                    cursor.snap(content)
                }
                cursor.render(references)
            }
        }
        case "ArrowDown" {
            # moves the cursor down
            if not cursor.rowStatus(content).have(STATUS_MORE) {
                cursor.detach()
                cursor.shift(1, null)
                if cursor.col > content.get(cursor.row).size() {
                    cursor.snap(content)
                }
                cursor.render(references)
            }
        }
        case "ArrowLeft" {
            # moves the cursor left
            if not cursor.colStatus(content).have(STATUS_LESS) {
                cursor.detach()
                cursor.shift(0, -1)
                cursor.render(references)
            }
        }
        case "ArrowRight" {
            # moves the cursor right
            # allows one more
            if cursor.col /= content.get(cursor.row).size()+1 {
                cursor.detach()
                cursor.shift(0, 1)
                cursor.render(references)
            }
        }
        case "Backspace" {
            if cursor.colStatus(content).have(STATUS_LESS) and cursor.rowStatus(content).have(STATUS_LESS) {
                return
            }

            cursor.detach()
            @line = content.get(cursor.row)
            if content.get(cursor.row).size() >= cursor.col and cursor.col > 1 {
                @left = content.get(cursor.row).get(cursor.col-1)
                @right = content.get(cursor.row).get(cursor.col)
                @pair = left + right
                if PAIRED_SYMBOLS.have(pair) {
                    @newLine = line.remove(cursor.col).remove(cursor.col-1)
                    textArea.updateLine(cursor.row, newLine, true)
                    textArea.setListener(cursor)
                    cursor.shift(0, -1)
                    cursor.render(self.textArea.references)
                    return
                }
            }

             @ws = 0
             each c of line {
                 if c /= " " {
                     break
                 }
                 ws++
            }
            if line.size() - ws == 0 and cursor.col == ws + 1 {
                textArea.removeLine(cursor.row, true)
                cursor.move(cursor.row-1, content.get(cursor.row-1).size()+1)
            } elif cursor.colStatus(content).have(STATUS_LESS) {
                textArea.removeLine(cursor.row, false)
                cursor.move(cursor.row-1, content.get(cursor.row-1).size()+1)
                textArea.updateLine(cursor.row, content.get(cursor.row)+line, true)
            } else {
                textArea.updateLine(cursor.row, line.remove(cursor.col-1), true)
                cursor.shift(0, -1)
            }
            cursor.render(textArea.references)
            textArea.setListener(cursor)
        }
        case "Enter" {
            @line = content.get(cursor.row)
            @ws = 0
            each c, i of line {
                if c /= " " or i >= cursor.col {
                    break
                }
                ws++
            }

            cursor.detach()
            if content.get(cursor.row).size() >= cursor.col and cursor.col > 1 {
                @left = content.get(cursor.row).get(cursor.col-1)
                @right = content.get(cursor.row).get(cursor.col)
                @pair = left + right
                if PAIRED_SYMBOLS.have(pair) {
                    textArea.updateLine(cursor.row, line.substring(1, cursor.col-1), false)
                    @last = " " * ws + line.substring(cursor.col, line.size())
                    textArea.insertLine(cursor.row+1, last, false)
                    textArea.insertLine(cursor.row+1, " " * (ws+4), true)
                    textArea.setListener(cursor)
                    cursor.move(cursor.row+1, ws+4+1)
                    cursor.render(textArea.references)
                    return
                }
            }

            textArea.updateLine(cursor.row, line.substring(1, cursor.col-1), true)
            @newLine = line.substring(cursor.col, line.size())
            newLine = " " * ws + newLine
            textArea.insertLine(cursor.row+1, newLine, true)
            textArea.setListener(cursor)
            cursor.move(cursor.row+1, ws+1)
            cursor.render(textArea.references)
        }
        case "End" {
            @line = content.get(cursor.row)
            each c, i of line.reverse() {
                if c /= " " {
                    cursor.move(null, line.size()-i+2)
                    cursor.render(textArea.references)
                    break
                }
            }
        }
        case "Home" {
            each c, i of content.get(cursor.row) {
                if c /= " " {
                    cursor.move(null, i)
                    cursor.render(textArea.references)
                    break
                }
            }
        }
        case "Tab" {
            @line = content.get(cursor.row)
            cursor.detach()
            textArea.updateLine(cursor.row, line.insert(cursor.col, " " * 4), true)
            textArea.setListener(cursor)
            cursor.shift(null, 4)
            cursor.render(textArea.references)
        }
        default {
            # ignore non character presses
            if key.size() /= 1 {
                return
            }

            # paired symbols autocomplete
            each pair of PAIRED_SYMBOLS {
                if key == pair.get(1) {
                    @line = content.get(cursor.row)
                    textArea.updateLine(cursor.row, line.insert(cursor.col, pair), true)
                    textArea.setListener(cursor)
                    cursor.shift(null, 1)
                    cursor.render(textArea.references)
                    return
                }
            }

            # type character
            @line = content.get(cursor.row).insert(cursor.col, key)
            cursor.detach()
            textArea.updateLine(cursor.row, line, true)
            textArea.setListener(cursor)
            self.cursor.shift(null, 1)
            self.cursor.render(textArea.references)
        }
    }
    event.preventDefault()
}

impl bind(self) for Editor {
    # bind keys
    self.textArea.root.listen("keydown", func(event) self.handleKeys(event))
    self.textArea.setListener(self.cursor)

    # bind drag and drop
    $textArea = self.textArea.root
    $textArea.listen("dragover", func(event) event.preventDefault())
    $textArea.listen("dragenter", func(_) $textArea.setStyle("border", "2px solid white"))
    $textArea.listen("dragleave", func(_) $textArea.removeStyle("border"))
    $textArea.listen("drop", func(event) {
        event.preventDefault()
        $textArea.setStyle("border", "2px solid yellow")

        # hand it to js
        javascript """
        const callback = pl.import("callback");
        const event = pl.import("event")["#raw"].value;
        const file = event.dataTransfer.files[0];
        const reader = new window.FileReader();
        reader.onload = (e) => {
            callback(e.target.result);
        }
        reader.readAsText(file);
        """
    })
    func callback(text) {
        $textArea.removeStyle("border")
        self.setContent(text)
    }
}

impl getContent(self) for Editor {
    return self.textArea.raw()
}

impl setContent(self, text: Str) for Editor {
    text = text.split("\r\n").join("\n")
    text = text.split("\r").join("\n")
    self.textArea.updateContent(text.split("\n"))
    self.textArea.setListener(self.cursor)
    self.cursor.move(1, 1)
    self.cursor.render(self.textArea.references)
}

func attachEditor($root) {
    $root.setClass("\($root.class()) editor")
    @navbar = Navbar($root)
    @editor = Editor($root)
    @output = Output($root)
    return dict(
        navbar: navbar,
        editor: editor,
        output: output
    )
}

func createEditor(root, text) {
    @out = attachEditor(root)
    out.editor.setContent(text)
    out.editor.bind()
    out.navbar.bind(out.output, out.editor)
    return out
}

func createSnippet(root, text) {
     root.setClass("\(root.class()) editor editor-snippet")
     @editor = Editor(root)
     editor.setContent(text)
     return editor
}
